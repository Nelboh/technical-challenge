{"version":3,"sources":["data/initial.js","data/reducers.js","data/store.js","logic/compareTeamColours.js","logic/compareTeamNames.js","logic/teamColourUpdater.js","logic/teamNameUpdater.js","components/Team/Team.js","logic/teamSorter.js","logic/playersUpdater.js","logic/resetPlayers.js","components/Players/Players.js","components/Settings/Settings.js","components/Lists/Lists.js","components/App/App.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["initial","reducer","state","action","type","index","payload","updatedColour","teamSettings","details","colour","updatedDetails","updatedTeamSetting","updatedName","name","teamA","teamB","settingsComplete","players","store","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","compareTeamColours","selectedColour","getState","compareTeamNames","selectedName","teamColourUpdater","dispatch","setTeamColour","teamNameUpdater","setTeamName","Team","props","handleTeamName","e","teamName","currentTarget","value","defaultTeamName","setState","nameEmpty","nameClash","team","length","slice","handleTeamColour","colourClash","bind","this","className","onChange","defaultValue","onClick","React","Component","handleTeam","setTeam","teamSorter","originalArray","array","half","Math","ceil","splice","splitArray","i","j","floor","random","temp","shuffleArray","playersUpdater","setPlayers","handleResetPlayers","Players","handleChange","newPlayers","existingPlayers","push","handleSubmit","preventDefault","handleReset","location","reload","playerName","map","player","onBlur","onFocus","target","Settings","Lists","handleOpenSettings","handleReshuffle","teamAName","teamBName","teamAColour","teamBColour","App","settingsCompleteProp","connect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14ceaedf.chunk.js","sourcesContent":["const initial = {\n\n    // Placeholder names for the first time the app loads. User inputted names overwrite these in a new copy of Players[]\n    \"players\": [\"Player 1\", \"Player 2\", \"Player 3\", \"Player 4\", \"Player 5\", \"Player 6\", \"Player 7\", \"Player 8\", \"Player 9\", \"Player 10\"],\n\n    // Holders for the two teams of shuffled Players[]\n    \"teamA\": [],\n    \"teamB\": [],\n\n    // Default settings for the Team components\n    \"teamSettings\": [\n        { \"details\": { \"name\": \"Team One\", \"colour\": \"1\" } },\n        { \"details\": { \"name\": \"Team Two\", \"colour\": \"2\" } },\n    ]\n\n};\n\nexport default initial;","import initial from \"./initial\";\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n\n        // The two sets of code below do the same thing, but the top version was easier for my brain to handle.\n\n        case \"SET_TEAM_COLOUR\": {\n            // This selects a specific instance of details from the TeamSettings array, targeted via its index\n            const index = action.payload.index;\n\n            // Makes a copy of details (via its index), and sets its colour attribute\n            const updatedColour = { ...state.teamSettings[index].details, colour: action.payload.colour };\n\n            // Makes a copy of TeamSettings (via its index), and uses updatedColour from above to update its details\n            const updatedDetails = { ...state.teamSettings[index], details: updatedColour };\n\n            // For some reason, I also have to make a copy of the index and update the newest copy of TeamSettings with it\n            const updatedTeamSetting = { ...state.teamSettings, [index]: updatedDetails };\n\n            // Makes a copy of the entire TeamSettings and updates the newest copy of teamSettings to be the updated version\n            const updatedTeamSettings = { ...state, teamSettings: updatedTeamSetting };\n\n            // Returns the updated copy\n            return updatedTeamSettings;\n\n            // This version came from the React documentation but for me is less easy to read\n\n            // const index = action.payload.index;\n            // return {\n            //     ...state,\n            //     teamSettings: {\n            //         ...state.teamSettings,\n            //         [index]: {\n            //             ...state.teamSettings[index],\n            //             details: {\n            //                 ...state.teamSettings[index].details,\n            //                 colour: action.payload.colour\n            //             }\n            //         }\n            //     }\n            // }\n        }\n\n        // This case works in the same way as the set_team_colour one above\n        case \"SET_TEAM_NAME\": {\n\n            const index = action.payload.index;\n\n            const updatedName = { ...state.teamSettings[index].details, name: action.payload.name };\n\n            const updatedDetails = { ...state.teamSettings[index], details: updatedName };\n\n            const updatedTeamSetting = { ...state.teamSettings, [index]: updatedDetails };\n\n            const updatedTeamSettings = { ...state, teamSettings: updatedTeamSetting };\n\n            return updatedTeamSettings;\n\n            // const index = action.payload.index;\n\n            // return {\n            //     ...state,\n            //     teamSettings: {\n            //         ...state.teamSettings,\n            //         [index]: {\n            //             ...state.teamSettings[index],\n            //             details: {\n            //                 ...state.teamSettings[index].details,\n            //                 name: action.payload.name\n            //             }\n            //         }\n            //     }\n            // }\n        }\n\n        // This stores half of the shuffled player list in teamA[]\n        case \"SET_TEAM_A\": {\n            return { ...state, teamA: action.payload };\n        }\n\n        // This stores half of the shuffled player list in teamB[]\n        case \"SET_TEAM_B\": {\n            return { ...state, teamB: action.payload };\n        }\n\n        // This sets settingsComplete to true, which is necessary for App to render either the Settings or List component\n        case \"SETTINGS_COMPLETE\": {\n            return { ...state, settingsComplete: true };\n        }\n\n        // The reverse of the above, which allows the user to go back to the Settings component\n        case \"SETTINGS_INCOMPLETE\": {\n            return { ...state, settingsComplete: false };\n        }\n\n        // This updates the values stored in players[]\n        case \"UPDATE_PLAYERS\": {\n            return { ...state, players: action.payload };\n        }\n\n        // This resets any of the user's changes back to their default values\n        case \"RESET\": return {\n            ...initial,\n        }\n\n        // As a fallback in case none of the above are used, the default returns the state unchanged\n        default: return state;\n\n    }\n};\n\nexport default reducer;","import { createStore, compose } from \"redux\";\nimport initial from \"./initial\";\nimport reducers from \"./reducers\";\n// import persistState from \"redux-localstorage\";\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n    initial,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    // composeEnhancers(persistState())\n);\n\n// store.subscribe(() => {\n//     let state = store.getState();\n\n// });\n\n// store.dispatch({ type: \"ADD_PLAYER\" })\n\n\nexport default store;","import store from \"../data/store\";\n\n// This checks to see whether teamA and teamB have the same kit colour chosen\n// TeamA has an index of 0, and teamB is 1\n// If they're the same it returns false, otherwise it returns true\n\nconst compareTeamColours = (index, selectedColour) => {\n\n    let teamSettings = store.getState().teamSettings;\n\n    if (index === 0) {\n        if (teamSettings[1].details.colour === selectedColour) {\n            return false;\n        } return true;\n    } else {\n        if (teamSettings[0].details.colour === selectedColour) {\n            return false;\n        } return true;\n    }\n}\n\nexport default compareTeamColours;","import store from \"../data/store\";\n\n// This checks to see whether teamA and teamB have been assigned the same name\n// TeamA has an index of 0, and teamB is 1\n\nconst compareTeamNames = (index, selectedName) => {\n\n    let teamSettings = store.getState().teamSettings;\n\n    if (index === 0) {\n        if (teamSettings[1].details.name === selectedName) {\n            return false;\n        } return true;\n    } else {\n        if (teamSettings[0].details.name === selectedName) {\n            return false;\n        } return true;\n    }\n}\n\nexport default compareTeamNames;","import store from \"../data/store\";\n\nfunction setTeamColour(index, colour) {\n    return {\n        type: \"SET_TEAM_COLOUR\",\n        payload: {\n            index: index,\n            colour: colour\n        },\n    }\n}\n\nconst teamColourUpdater = (index, colour) => {\n    store.dispatch(setTeamColour(index, colour))\n}\n\nexport default teamColourUpdater;","import store from \"../data/store\";\n\nfunction setTeamName(index, name) {\n    return {\n        type: \"SET_TEAM_NAME\",\n        payload: {\n            index: index,\n            name: name,\n        }\n    }\n}\n\nconst teamNameUpdater = (index, name) => {\n    store.dispatch(setTeamName(index, name))\n}\n\nexport default teamNameUpdater;","import React from \"react\";\nimport store from \"../../data/store\";\n\n// Logic files\nimport compareTeamColours from \"../../logic/compareTeamColours\";\nimport compareTeamNames from \"../../logic/compareTeamNames\";\nimport teamColourUpdater from \"../../logic/teamColourUpdater\";\nimport teamNameUpdater from \"../../logic/teamNameUpdater\";\n\n\nclass Team extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n            // These fetch the name and colour from store state, accessed via their index (0 or 1)\n            name: store.getState().teamSettings[this.props.team].details.name,\n            colour: store.getState().teamSettings[this.props.team].details.colour,\n\n            // These help with validating the inputs, for duplicate names or fields that haven't been filled out\n            colourClash: false,\n            nameClash: false,\n            nameEmpty: false,\n        }\n\n        this.handleTeamName = this.handleTeamName.bind(this);\n        this.handleTeamColour = this.handleTeamColour.bind(this);\n    }\n\n    // This updates the input name for each team\n    handleTeamName = (e) => {\n\n        let teamName = e.currentTarget.value;\n\n        // If the input is left empty, it triggers nameEmpty = true, which renders a warning message\n        // It also sets a default team name if nameEmpty = true\n        if (e.currentTarget.value === \"\") {\n            teamName = this.props.defaultTeamName;\n            this.setState({ nameEmpty: true });\n            this.setState({ name: this.props.defaultTeamName })\n        } else {\n\n            // If nameEmpty = false, it checks if Team 1 and 2 have the same names (nameClash = true)\n            // If they do, a warning message is rendered\n            this.setState({ nameEmpty: false });\n            this.setState({ nameClash: false });\n            if (compareTeamNames(this.props.team, e.currentTarget.value)) {\n                this.setState({ nameClash: false });\n\n                this.setState({ name: e.currentTarget.value });\n\n                teamNameUpdater(this.props.team, e.currentTarget.value);\n\n            } else {\n                this.setState({ nameClash: true });\n                this.setState({ name: e.currentTarget.value });\n            }\n        }\n        // This truncates an input team name to be a maximum of 16 characters long, plus an ellipsis\n        if (teamName.length > 16) {\n            teamName = teamName.slice(0, 16) + \"...\";\n        }\n\n        teamNameUpdater(this.props.team, teamName);\n\n    }\n\n    // This updates the chosen team colour for each team\n    // If team colours are the same (colourClash = true), a warning message is rendered\n    handleTeamColour = (e) => {\n\n        this.setState({ colour: e.currentTarget.value });\n\n        if (compareTeamColours(this.props.team, e.currentTarget.value)) {\n\n            this.setState({ colourClash: false });\n\n            this.setState({ colour: e.currentTarget.value });\n            teamColourUpdater(this.props.team, e.currentTarget.value);\n\n        } else {\n            this.setState({ colourClash: true });\n        }\n    }\n\n    render() {\n\n        let colourClash = this.state.colourClash;\n        let nameClash = this.state.nameClash;\n        let nameEmpty = this.state.nameEmpty;\n\n        return (\n            <>\n\n                <h3>{this.props.defaultTeamName} Name</h3>\n\n                {/* This changes the class name for each error message, adjusting the styling to show or hide said message depending on the conditions met */}\n                <p className={nameEmpty ? \"errorMessage\" : \"errorMessageHidden\"}>Please enter a name</p>\n                <p className={nameClash ? \"errorMessage\" : \"errorMessageHidden\"}>Team names must be different</p>\n\n                <input\n                    onChange={this.handleTeamName}\n                    defaultValue={this.state.name}\n                />\n\n                <section className=\"kitColourSpacer\">\n                    <h3>{this.props.defaultTeamName} Kit Colour</h3>\n\n                    {/* This is another error message with styling that changes depending on conditions met */}\n                    <p className={colourClash ? \"errorMessage\" : \"errorMessageHidden\"}> Teams must have different kit colours</p>\n\n                    <div className=\"kitButtonHolder\">\n\n                        {/* These could be refactored to be a single component with props */}\n                        <button\n                            value=\"1\"\n                            className={this.state.colour === \"1\" ? \"kitButton kit1 kitSelected\" : \"kitButton kit1\"}\n                            onClick={this.handleTeamColour}\n                        />\n\n                        <button\n                            value=\"2\"\n                            className={this.state.colour === \"2\" ? \"kitButton kit2 kitSelected\" : \"kitButton kit2\"}\n                            onClick={this.handleTeamColour}\n                        />\n\n                        <button\n                            value=\"3\"\n                            className={this.state.colour === \"3\" ? \"kitButton kit3 kitSelected\" : \"kitButton kit3\"}\n                            onClick={this.handleTeamColour}\n                        />\n\n                        <button\n                            value=\"4\"\n                            className={this.state.colour === \"4\" ? \"kitButton kit4 kitSelected\" : \"kitButton kit4\"}\n                            onClick={this.handleTeamColour}\n                        />\n\n                        <button\n                            value=\"5\"\n                            className={this.state.colour === \"5\" ? \"kitButton kit5 kitSelected\" : \"kitButton kit5\"}\n                            onClick={this.handleTeamColour}\n                        />\n\n                    </div>\n                </section>\n\n            </>\n        )\n    }\n}\n\nexport default Team;","import store from \"../data/store\";\n\n// This uses the Fisher-Price algorithm (just kidding, it's Fisher-Yates) to shuffle the names in the array\nconst shuffleArray = (array) => {\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n\n    return array;\n\n};\n\n// This builds an action with the team in the payload\nfunction setTeam(type, team) {\n    return {\n        type: type,\n        payload: team,\n    }\n}\n\n// This sets \"team\" in the store using the above action\nfunction handleTeam(type, team) {\n    store.dispatch(setTeam(type, team))\n}\n\n// This takes the array and splits it in half. In case of an odd number of players (which isn't possible currently), TeamA will be larger.\nconst splitArray = (array) => {\n\n    const half = Math.ceil(array.length / 2);\n\n    const teamA = array.splice(0, half)\n    const teamB = array.splice(-half)\n\n    handleTeam(\"SET_TEAM_A\", teamA)\n    handleTeam(\"SET_TEAM_B\", teamB)\n\n}\n\nconst teamSorter = () => {\n    // Make a copy of the original array\n    let originalArray = store.getState().players\n    let inputArray = [...originalArray]\n\n    // Shuffle said copy\n    let shuffledArray = shuffleArray(inputArray)\n\n    // Split the shuffled copy\n    splitArray(shuffledArray)\n};\n\nexport default teamSorter;","import store from \"../data/store\";\n\n// This builds an action with the updated players array in the payload\nfunction setPlayers(players) {\n    return {\n        type: \"UPDATE_PLAYERS\",\n        payload: players,\n    }\n}\n\nconst playersUpdater = (players) => {\n    store.dispatch(setPlayers(players))\n};\n\nexport default playersUpdater;","import store from \"../data/store\";\n\nfunction resetPlayers() {\n    return {\n        type: \"RESET\",\n    }\n}\n\nfunction handleResetPlayers() {\n    store.dispatch(resetPlayers());\n}\n\nexport default handleResetPlayers;","import { Component } from \"react\";\nimport store from \"../../data/store\";\n\n// Logic files\nimport teamSorter from \"../../logic/teamSorter\";\nimport playersUpdater from \"../../logic/playersUpdater\";\nimport handleResetPlayers from \"../../logic/resetPlayers\";\n\n\nclass Players extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            playerName: \"\",\n            existingPlayers: store.getState().players,\n            settingsComplete: false,\n\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleChange = (index, e) => {\n\n        // This loop updates the saved player name in real-time (probably not the most efficient way to do this)\n\n        let newPlayers = [];\n        let i;\n        for (i = 0; i < this.state.existingPlayers.length; i += 1) {\n\n            // Checks if this is the player that needs updating via its index\n            if (i === index) {\n\n                // This forces a placeholder name into the list of players if an input field is left empty\n                if (e.currentTarget.value === \"\") {\n                    newPlayers.push(\"Name not set\")\n\n                } else {\n\n                    // It also prevents an input name being longer than 16 characters, with an ellipsis added\n                    newPlayers.push(e.currentTarget.value.slice(0, 16) + \"...\")\n                }\n            } else {\n                newPlayers.push(this.state.existingPlayers[i])\n            }\n        }\n\n        this.setState({ existingPlayers: newPlayers });\n    }\n\n    // Once the players have been input, the submit button updates the player list in store state\n    // Then it runs the teamSorter logic to shuffle and split the teams\n    // Then settings complete is set to true via settings_complete, so the List component will render instead\n    handleSubmit = (e) => {\n        e.preventDefault();\n        playersUpdater(this.state.existingPlayers);\n        teamSorter();\n        store.dispatch({ type: \"SETTINGS_COMPLETE\" });\n    }\n\n    // This button allows the user to reset all input fields and colour choices back to the default\n    handleReset = (e) => {\n        e.preventDefault();\n        handleResetPlayers(\"RESET\");\n        window.location.reload();\n    }\n\n    render() {\n\n        return (\n            <section>\n                <div className=\"playerColumns cardGreen\">\n\n                    {/* This creates new entries for the player list by mapping through the array of player names */}\n                    {this.state.existingPlayers.map((player, index) => (\n                        <div className=\"playerRows\" key={index}>\n\n                            <h3 className=\"playerLabel\">Player {index + 1}</h3>\n\n                            <input\n                                defaultValue={player}\n                                index={index}\n                                onBlur={this.handleChange.bind(this, index)}\n                                onFocus={(e) => e.target.value = \"\"}\n                            ></input>\n\n                        </div>\n                    ))}\n\n                </div>\n\n                <footer className=\"cardBottom playersButtons\">\n\n                    <button onClick={this.handleReset} className=\"pillButton\">Reset all</button>\n\n                    <button type=\"submit\" onClick={this.handleSubmit} className=\"pillButton\">Generate Teams</button>\n\n                </footer>\n\n            </section>\n        )\n    }\n}\n\nexport default Players;","import Team from \"../Team/Team\";\nimport Players from \"../Players/Players\";\n\n// This component renders two instances of the Team component, with different props (index 0 and 1) to determine which team it is\n\nconst Settings = () => (\n\n    <section>\n\n        {/* This is the team details section */}\n        <section className=\"cardHolder\">\n            <header className=\"cardTop\">\n                <h2>Team Settings</h2>\n            </header>\n\n            <div className=\"cardGreen\">\n                <Team team={0} defaultTeamName=\"Team One\" />\n\n                <div className=\"teamsDivider\" />\n\n                <Team team={1} defaultTeamName=\"Team Two\" />\n            </div>\n\n            <footer className=\"cardBottom\"></footer>\n        </section>\n\n        {/* This is the player details section */}\n        <section className=\"cardHolder\">\n\n            <header className=\"cardTop\">\n                <h2>Enter players</h2>\n            </header>\n\n            <div>\n                <Players />\n            </div>\n\n        </section>\n\n    </section>\n\n)\n\nexport default Settings;","import { Component } from \"react\";\nimport store from \"../../data/store\";\n\n// This is the logic that splits and shuffles the list of player names into two random teams\nimport teamSorter from \"../../logic/teamSorter\";\n\nclass Lists extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            settingsComplete: true,\n        };\n\n        this.handleOpenSettings = this.handleOpenSettings.bind(this);\n\n        this.handleReshuffle = this.handleReshuffle.bind(this);\n    }\n\n    // This sets SettingsComplete back to false, and returns the user to the Settings component\n    handleOpenSettings = (e) => {\n        store.dispatch({ type: \"SETTINGS_INCOMPLETE\" });\n    }\n\n    // This calls the teamSorter logic again and re-runs it, then updates teamA and teamB to reflect the new random values\n    handleReshuffle = (e) => {\n        e.preventDefault();\n        teamSorter();\n\n        this.setState({\n            teamA: store.getState().teamA,\n            teamB: store.getState().teamB,\n        })\n    }\n\n    render() {\n\n        // There's a lot of repeated code here. \n        // Given more time, I would refactor this to be a single component with props\n\n        // This fetches the split and shuffled teams\n        let teamA = store.getState().teamA;\n        let teamB = store.getState().teamB;\n\n        // This fetches the user's input team names\n        let teamAName = store.getState().teamSettings[0].details.name;\n        let teamBName = store.getState().teamSettings[1].details.name;\n\n        // This sets the className for the kit colour icon. I found it easier to read here than inline.\n        // I've concatenated the team colour (a number) onto the class name (e.g. kit1)\n        let teamAColour = \"chosenKitColour kit\" + store.getState().teamSettings[0].details.colour;\n        let teamBColour = \"chosenKitColour kit\" + store.getState().teamSettings[1].details.colour;\n\n        return (\n            <section>\n                <h2>{teamAName} VS. {teamBName}</h2>\n\n                <div className=\"twoLists\">\n\n                    {/* This is the Team A section */}\n                    <section className=\"cardHolder\">\n\n                        <header className=\"cardTop kitAndName\">\n                            <h3 className=\"h3alternate\">{teamAName}</h3>\n                            <div className={teamAColour}></div>\n                        </header>\n\n                        <div className=\"cardWhite\">\n\n                            {/* This maps the individual players from the teamA list */}\n\n                            {teamA.map((player, index) => (\n                                <div key={index}>\n                                    <p>{player}</p>\n                                </div>\n                            ))}\n                        </div>\n\n                        <footer className=\"cardBottom\"></footer>\n                    </section>\n\n                    {/* This is the Team B section */}\n                    <section className=\"cardHolder\">\n\n                        <header className=\"cardTop kitAndName\">\n                            <h3 className=\"h3alternate\">{teamBName}</h3>\n                            <div className={teamBColour}></div>\n                        </header>\n\n                        <div className=\"cardWhite\">\n\n                            {/* This maps the individual players from the teamB list */}\n                            {teamB.map((player, index) => (\n                                <div key={index}>\n                                    <p>{player}</p>\n                                </div>\n                            ))}\n\n                        </div>\n\n                        <footer className=\"cardBottom\"></footer>\n                    </section>\n\n                </div>\n\n                <div className=\"listButtons\">\n                    <button onClick={this.handleOpenSettings} className=\"pillButton\">Settings</button>\n\n                    <button onClick={this.handleReshuffle} className=\"pillButton\">Reshuffle</button>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Lists;","import Settings from \"../Settings/Settings\";\nimport Lists from \"../Lists/Lists\";\n\n// SettingsCompleteProp comes from the App>index file. \n// SettingsComplete is set to true when the submit button in Settings > Players is clicked\nconst App = ({ settingsCompleteProp }) => (\n\n  <>\n    <header>\n      <h1 className=\"title\">5-a-side<br />Team Generator</h1>\n    </header>\n\n    <main>\n\n      {\n        !settingsCompleteProp ? (\n\n          <Settings />\n\n        ) : (\n\n            <Lists />\n\n          )\n      }\n\n    </main>\n\n    <footer>\n      <h2 className=\"h3alternate\">© 2020 Ellie Hobbs</h2>\n    </footer>\n  </>\n)\n\nexport default App;\n","import App from \"./App\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n\n    return {\n        settingsCompleteProp: state.settingsComplete,\n    }\n}\n\nexport default connect(mapStateToProps)(App); // wraps the component with mapStateToProps","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport store from './data/store';\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}